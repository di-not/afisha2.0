// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  fullName String
  email    String   @unique
  password String
  phone    String?
  city     String?
  about    String?
  avatar   String?
  role     UserRole @default(USER)

  // Для танцоров
  mainDanceStyleId    String? @db.ObjectId
  danceSchoolId       String? @db.ObjectId
  
  // Для организаторов
  isOrganizer         Boolean @default(false)
  organizationName    String?
  organizationCity    String?
  organizationStyleId String? @db.ObjectId

  provider   String?
  providerId String?

  // Связи
  mainDanceStyle    DanceStyle?    @relation(fields: [mainDanceStyleId], references: [id], name: "MainDanceStyle")
  danceSchool       DanceSchool?   @relation(fields: [danceSchoolId], references: [id])
  organizationStyle DanceStyle?    @relation(fields: [organizationStyleId], references: [id], name: "OrganizationStyle")

  // Многие-ко-многим отношения через промежуточные модели
  additionalStyles UserDanceStyle[]
  eventsCreated    Event[]          @relation("EventOrganizer")
  eventsAttended   UserEvent[]
  favoriteEvents   UserFavoriteEvent[]
  bookmarkedEvents UserBookmarkedEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Промежуточная модель для дополнительных стилей танца
model UserDanceStyle {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  danceStyleId String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  danceStyle  DanceStyle @relation(fields: [danceStyleId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, danceStyleId])
}

// Промежуточная модель для мероприятий, которые пользователь посещает
model UserEvent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  eventId     String   @db.ObjectId
  status      EventAttendanceStatus @default(GOING) // GOING, INTERESTED, WILL_GO
  user        User     @relation(fields: [userId], references: [id])
  event       Event    @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

// Промежуточная модель для избранных мероприятий
model UserFavoriteEvent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  eventId     String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  event       Event    @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

// Промежуточная модель для мероприятий в закладках
model UserBookmarkedEvent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  eventId     String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  event       Event    @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model DanceStyle {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String?
  
  usersMain User[] @relation("MainDanceStyle")
  usersOrganization User[] @relation("OrganizationStyle")
  usersAdditional UserDanceStyle[]
  schools DanceSchool[]
  events Event[]
  
  createdAt DateTime @default(now())
}

model DanceSchool {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  city String
  styleId String @db.ObjectId
  description String?
  
  style DanceStyle @relation(fields: [styleId], references: [id])
  users User[]
  
  createdAt DateTime @default(now())
}

model Event {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title         String
  description   String?
  imageUrl      String
  startDateTime String
  endDateTime   String

  place   Place?  @relation(fields: [placeId], references: [id])
  placeId String? @db.ObjectId

  organizer   User?   @relation(fields: [organizerId], references: [id], name: "EventOrganizer")
  organizerId String? @db.ObjectId

  danceStyleId String? @db.ObjectId
  danceStyle DanceStyle? @relation(fields: [danceStyleId], references: [id])

  // Многие-ко-многим через промежуточные модели
  attendees UserEvent[]
  favorites UserFavoriteEvent[]
  bookmarks UserBookmarkedEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Place {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  address String
  url  String
  events Event[]
}

enum UserRole {
  USER
  ORGANIZER
  ADMIN
}

enum EventAttendanceStatus {
  INTERESTED  // Собираюсь пойти
  GOING       // Пойду
  ATTENDED    // Посетил(а)
}